mybatis-plus.mapper-locations=classpath:/mapper/mp/*Mapper.xml
## pageHelper配置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql
pagehelper.page-size-zero=true
server.port=8090

#log
logging.level.com.jie.druid.mapper=DEBUG
logging.config=classpath:log4j2.xml


#1.flase： 默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常
#2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建
#3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）
#4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
#database-schema-update: true
#spring.activiti.database-schema-update=true
#检测历史表是否存在
#spring.activiti.db-history-used: true
#记录历史等级 可配置的历史级别有none, activity, audit, full
#spring.activiti.history-level: full

#数据库Start----------------------------数据库Start

#主数据库 master
spring.datasource.druid.master.type=com.alibaba.druid.pool.DruidDataSource
#这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
#spring.datasource.druid.master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.master.url=jdbc:mysql://localhost:3306/quartz?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false
spring.datasource.druid.master.username=root
spring.datasource.druid.master.password=123456
#连接池配置
#初始化大小、最小空闲、最大激活
spring.datasource.druid.master.initial-size=5
spring.datasource.druid.master.min-idle=5
spring.datasource.druid.master.max-active=10
#配置获取连接等待超时的时间
spring.datasource.druid.master.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.master.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.master.min-evictable-idle-time-millis=300000
spring.datasource.druid.master.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.master.test-while-idle=true
spring.datasource.druid.master.test-on-borrow=false
spring.datasource.druid.master.test-on-return=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.master.pool-prepared-statements=true
spring.datasource.druid.master.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.master.filters=stat,wall,log4j2
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.master.use-global-data-source-stat=true
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.master.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#从数据库 slave
spring.datasource.druid.slave.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.druid.slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.slave.url=jdbc:mysql://localhost:3306/jie?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false
spring.datasource.druid.slave.username=root
spring.datasource.druid.slave.password=123456
#连接池配置
#初始化大小、最小空闲、最大激活
spring.datasource.druid.slave.initial-size=5
spring.datasource.druid.slave.min-idle=5
spring.datasource.druid.slave.max-active=10
#配置获取连接等待超时的时间
spring.datasource.druid.slave.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.slave.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.slave.min-evictable-idle-time-millis=300000
spring.datasource.druid.slave.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.slave.test-while-idle=true
spring.datasource.druid.slave.test-on-borrow=false
spring.datasource.druid.slave.test-on-return=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.slave.pool-prepared-statements=true
spring.datasource.druid.slave.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.slave.filters=stat,wall,log4j2
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.slave.use-global-data-source-stat=true
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.slave.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#数据库end----------------------------数据库end